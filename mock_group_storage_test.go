// Code generated by mockery v2.53.3. DO NOT EDIT.

package blockchain

import mock "github.com/stretchr/testify/mock"

// MockGroupStorage is an autogenerated mock type for the GroupStorage type
type MockGroupStorage struct {
	mock.Mock
}

// DeleteBlock provides a mock function with given fields: block
func (_m *MockGroupStorage) DeleteBlock(block Block) error {
	ret := _m.Called(block)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBlock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(Block) error); ok {
		r0 = rf(block)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteBlockGroup provides a mock function with given fields: blocks
func (_m *MockGroupStorage) DeleteBlockGroup(blocks BlockGroup) error {
	ret := _m.Called(blocks)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBlockGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(BlockGroup) error); ok {
		r0 = rf(blocks)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LoadBlocks provides a mock function with given fields: cursor, count
func (_m *MockGroupStorage) LoadBlocks(cursor interface{}, count int) (BlockGroup, interface{}, error) {
	ret := _m.Called(cursor, count)

	if len(ret) == 0 {
		panic("no return value specified for LoadBlocks")
	}

	var r0 BlockGroup
	var r1 interface{}
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, int) (BlockGroup, interface{}, error)); ok {
		return rf(cursor, count)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int) BlockGroup); ok {
		r0 = rf(cursor, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(BlockGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int) interface{}); ok {
		r1 = rf(cursor, count)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(interface{})
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, int) error); ok {
		r2 = rf(cursor, count)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// LoadLastBlock provides a mock function with no fields
func (_m *MockGroupStorage) LoadLastBlock() (Block, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LoadLastBlock")
	}

	var r0 Block
	var r1 error
	if rf, ok := ret.Get(0).(func() (Block, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() Block); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(Block)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreBlock provides a mock function with given fields: block
func (_m *MockGroupStorage) StoreBlock(block Block) error {
	ret := _m.Called(block)

	if len(ret) == 0 {
		panic("no return value specified for StoreBlock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(Block) error); ok {
		r0 = rf(block)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreBlockGroup provides a mock function with given fields: blocks
func (_m *MockGroupStorage) StoreBlockGroup(blocks BlockGroup) error {
	ret := _m.Called(blocks)

	if len(ret) == 0 {
		panic("no return value specified for StoreBlockGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(BlockGroup) error); ok {
		r0 = rf(blocks)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockGroupStorage creates a new instance of MockGroupStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGroupStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGroupStorage {
	mock := &MockGroupStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
