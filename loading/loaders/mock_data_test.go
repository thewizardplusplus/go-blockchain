// Code generated by mockery v2.53.3. DO NOT EDIT.

package loaders

import (
	mock "github.com/stretchr/testify/mock"
	blockchain "github.com/thewizardplusplus/go-blockchain"
)

// MockData is an autogenerated mock type for the Data type
type MockData struct {
	mock.Mock
}

// Equal provides a mock function with given fields: data
func (_m *MockData) Equal(data blockchain.Data) bool {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for Equal")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(blockchain.Data) bool); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// String provides a mock function with no fields
func (_m *MockData) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewMockData creates a new instance of MockData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockData(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockData {
	mock := &MockData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
