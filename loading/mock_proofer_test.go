// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package loading

import (
	context "context"
	mock "github.com/stretchr/testify/mock"
	blockchain "github.com/thewizardplusplus/go-blockchain"
)

// MockProofer is an autogenerated mock type for the Proofer type
type MockProofer struct {
	mock.Mock
}

// Difficulty provides a mock function with given fields: hash
func (_m *MockProofer) Difficulty(hash string) (int, error) {
	ret := _m.Called(hash)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(hash)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Hash provides a mock function with given fields: block
func (_m *MockProofer) Hash(block blockchain.Block) string {
	ret := _m.Called(block)

	var r0 string
	if rf, ok := ret.Get(0).(func(blockchain.Block) string); ok {
		r0 = rf(block)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// HashEx provides a mock function with given fields: ctx, block
func (_m *MockProofer) HashEx(ctx context.Context, block blockchain.Block) (string, error) {
	ret := _m.Called(ctx, block)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, blockchain.Block) string); ok {
		r0 = rf(ctx, block)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, blockchain.Block) error); ok {
		r1 = rf(ctx, block)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Validate provides a mock function with given fields: block
func (_m *MockProofer) Validate(block blockchain.Block) error {
	ret := _m.Called(block)

	var r0 error
	if rf, ok := ret.Get(0).(func(blockchain.Block) error); ok {
		r0 = rf(block)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
