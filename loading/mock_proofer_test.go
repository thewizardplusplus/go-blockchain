// Code generated by mockery v2.53.3. DO NOT EDIT.

package loading

import (
	context "context"

	blockchain "github.com/thewizardplusplus/go-blockchain"

	mock "github.com/stretchr/testify/mock"
)

// MockProofer is an autogenerated mock type for the Proofer type
type MockProofer struct {
	mock.Mock
}

// Difficulty provides a mock function with given fields: hash
func (_m *MockProofer) Difficulty(hash string) (int, error) {
	ret := _m.Called(hash)

	if len(ret) == 0 {
		panic("no return value specified for Difficulty")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int, error)); ok {
		return rf(hash)
	}
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(hash)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Hash provides a mock function with given fields: block
func (_m *MockProofer) Hash(block blockchain.Block) string {
	ret := _m.Called(block)

	if len(ret) == 0 {
		panic("no return value specified for Hash")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(blockchain.Block) string); ok {
		r0 = rf(block)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// HashEx provides a mock function with given fields: ctx, block
func (_m *MockProofer) HashEx(ctx context.Context, block blockchain.Block) (string, error) {
	ret := _m.Called(ctx, block)

	if len(ret) == 0 {
		panic("no return value specified for HashEx")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, blockchain.Block) (string, error)); ok {
		return rf(ctx, block)
	}
	if rf, ok := ret.Get(0).(func(context.Context, blockchain.Block) string); ok {
		r0 = rf(ctx, block)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, blockchain.Block) error); ok {
		r1 = rf(ctx, block)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Validate provides a mock function with given fields: block
func (_m *MockProofer) Validate(block blockchain.Block) error {
	ret := _m.Called(block)

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(blockchain.Block) error); ok {
		r0 = rf(block)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockProofer creates a new instance of MockProofer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProofer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProofer {
	mock := &MockProofer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
